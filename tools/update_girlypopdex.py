#!/usr/bin/env python3

# This script reads girlypopdex.txt and generates the C code to update gSpeciesInfo
# with the correct girlypopdexNum values

import re

def get_species_constant(species_name):
    # Convert species name to SPECIES_NAME format
    # Handle special cases first
    special_cases = {
        "Mr. Mime": "MR_MIME",
        "Mime Jr.": "MIME_JR",
        "Porygon 2": "PORYGON2",
        "Porygon Z": "PORYGON_Z",
        "Alolan Raichu": "RAICHU_ALOLA",
        "Alolan Marowak": "MAROWAK_ALOLA",
        "Alolan Meowth": "MEOWTH_ALOLA",
        "Alolan Persian": "PERSIAN_ALOLA",
        "Alolan Vulpix": "VULPIX_ALOLA",
        "Alolan Ninetales": "NINETALES_ALOLA",
    }
    
    if species_name in special_cases:
        return "SPECIES_" + special_cases[species_name]
        
    # Remove spaces and special characters, convert to uppercase
    constant = re.sub(r'[^a-zA-Z0-9]', '_', species_name).upper()
    return "SPECIES_" + constant

def parse_girlypopdex(filename):
    species_map = {}  # Maps species to their Girlypopdex info
    dex_num = 1
    
    with open(filename, 'r') as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            
            match = re.search(r'Species:\s*([^|]+).*Category:\s*([^|]+)', line)
            if not match:
                continue
                
            species_name = match.group(1).strip()
            category = match.group(2).strip()
            species_constant = get_species_constant(species_name)
            
            if species_constant not in species_map:
                species_map[species_constant] = {
                    'dex_num': dex_num,
                    'comment': f"// {category}"
                }
                dex_num += 1
    
    return species_map

def generate_species_info_updates(species_map):
    updates = []
    
    # Generate the update for each species
    for species_constant, dex_num in species_map.items():
        update = f"    [NATIONAL_TO_SPECIES({species_constant})] = {{ .girlypopdexNum = GIRLYPOPDEX_{dex_num} }},"
        updates.append(update)
        
    return updates

def write_girlypopdex_entries(species_map, output_file):
    """Write the girlypopdex entries header file."""
    with open(output_file, 'w') as f:
        f.write("// This file is generated by update_girlypopdex.py\n\n")
        f.write("#ifndef GUARD_CONSTANTS_GIRLYPOPDEX_ENTRIES_H\n")
        f.write("#define GUARD_CONSTANTS_GIRLYPOPDEX_ENTRIES_H\n\n")
        f.write("#include \"global.h\"\n\n")
        
        # Start enum definition
        f.write("enum GirlypopdexEntries {\n")
        
        # Write the entries sorted by Girlypopdex number
        sorted_entries = sorted(species_map.items(), key=lambda x: x[1]['dex_num'])
        for species_constant, info in sorted_entries:
            # Remove SPECIES_ from the constant name for the Girlypopdex entry
            entry_name = species_constant.replace('SPECIES_', '')
            f.write(f"    {info['comment']}\n")
            f.write(f"    GIRLYPOPDEX_{entry_name} = {info['dex_num']},\n\n")
        
        # End enum and write NUM_GIRLYPOPDEX
        f.write(f"    NUM_GIRLYPOPDEX = {len(sorted_entries)}\n")
        f.write("};\n\n")
        
        f.write("#endif // GUARD_CONSTANTS_GIRLYPOPDEX_ENTRIES_H\n")

def write_species_info_updates(species_map, output_file):
    """Write the species info updates file."""
    with open(output_file, 'w') as f:
        f.write("// This file is generated by update_girlypopdex.py\n\n")
        f.write("#include \"global.h\"\n")
        f.write("#include \"constants/species.h\"\n\n")
        f.write("const struct SpeciesInfoUpdate gSpeciesInfoUpdates[] = {\n")
        
        for species_constant, info in species_map.items():
            # Remove SPECIES_ from the constant name for the Girlypopdex entry
            entry_name = species_constant.replace('SPECIES_', '')
            f.write(f"    [NATIONAL_TO_SPECIES({species_constant})] = {{ .girlypopdexNum = GIRLYPOPDEX_{entry_name} }},\n")
        
        f.write("};\n")

def main():
    # Parse girlypopdex.txt
    species_map = parse_girlypopdex('girlypopdex.txt')
    
    # Write the output files
    write_girlypopdex_entries(species_map, 'include/constants/girlypopdex_entries.h')
    write_species_info_updates(species_map, 'src/data/pokemon/species_info_updates.h')

if __name__ == "__main__":
    main()
